---
import Formula from '../shared/Formula.astro';
---

<div class="calculator-container">
  <div class="calculator-header">
    <h2>Relative Time Severity Calculator</h2>
    <p class="calculator-description">
      Calculate the Relative Time Severity to compare actual time to optimal:
      <Formula formula="\text{TSS} = \log_{10}\left(\frac{\text{TV}(S)}{\text{TV}^*(S)}\right)" display={true} />
    </p>
  </div>
  
  <div class="calculator-inputs">
    <div class="input-group">
      <label for="actual-tv-input">
        <strong>Actual Time Violence TV(S)</strong>
        <span class="input-help">Actual time consumed, in hours</span>
      </label>
      <input type="number" id="actual-tv-input" min="0" step="0.1" value="10" />
    </div>
    
    <div class="input-group">
      <label for="optimal-tv-input">
        <strong>Optimal Time Violence TV*(S)</strong>
        <span class="input-help">Theoretical minimal time, in hours</span>
      </label>
      <input type="number" id="optimal-tv-input" min="0.1" step="0.1" value="1" />
    </div>
  </div>
  
  <div class="calculator-result">
    <div class="result-value">
      <span class="result-label">Relative Time Severity:</span>
      <span class="result-number" id="tss-result">—</span>
    </div>
    <div class="result-tier" id="tier-display"></div>
    <div class="result-breakdown" id="breakdown"></div>
  </div>
  
  <div class="calculator-visualization">
    <div class="tier-scale">
      <div class="tier-marker" id="tier-marker"></div>
      <div class="tier-labels">
        <span>Baseline (≤2×)</span>
        <span>Moderate (≈5×)</span>
        <span>Major (≈10×)</span>
        <span>Severe (≈25×)</span>
        <span>Crisis (≥100×)</span>
      </div>
    </div>
  </div>
</div>

<script>
  import { calculateTSS, getTSSTier, formatNumber } from '../../scripts/formulas.js';
  
  const actualInput = document.getElementById('actual-tv-input');
  const optimalInput = document.getElementById('optimal-tv-input');
  const resultEl = document.getElementById('tss-result');
  const tierEl = document.getElementById('tier-display');
  const breakdownEl = document.getElementById('breakdown');
  const markerEl = document.getElementById('tier-marker');
  
  function updateCalculator() {
    const actual = parseFloat(actualInput.value) || 0;
    const optimal = parseFloat(optimalInput.value) || 1;
    
    const tss = calculateTSS(actual, optimal);
    const tier = getTSSTier(tss);
    
    if (tss === null || isNaN(tss)) {
      resultEl.textContent = '—';
      tierEl.innerHTML = '';
      breakdownEl.innerHTML = '';
      if (markerEl) markerEl.style.display = 'none';
      return;
    }
    
    resultEl.textContent = formatNumber(tss, 2);
    resultEl.style.color = tier.color;
    
    // Update tier display
    tierEl.innerHTML = `
      <div class="tier-badge" style="background-color: ${tier.color}20; border-left: 4px solid ${tier.color};">
        <strong style="color: ${tier.color};">${tier.tier}</strong> — Approx. Overhead: ${tier.overhead}
      </div>
    `;
    
    // Update breakdown
    const ratio = actual / optimal;
    breakdownEl.innerHTML = `
      <p><strong>Breakdown:</strong></p>
      <ul>
        <li>Actual Time: <strong>${formatNumber(actual)} hours</strong></li>
        <li>Optimal Time: <strong>${formatNumber(optimal)} hours</strong></li>
        <li>Ratio: <strong>${formatNumber(ratio, 2)}×</strong></li>
        <li>TSS: <strong>${formatNumber(tss, 2)}</strong> (log₁₀ scale)</li>
      </ul>
    `;
    
    // Update marker position (0-2+ scale maps to 0-100%)
    const position = Math.min(100, Math.max(0, (tss / 2) * 100));
    if (markerEl) {
      markerEl.style.display = 'block';
      markerEl.style.left = `${position}%`;
      markerEl.style.backgroundColor = tier.color;
    }
  }
  
  // Initial calculation
  updateCalculator();
  
  // Update on input change
  actualInput.addEventListener('input', updateCalculator);
  optimalInput.addEventListener('input', updateCalculator);
</script>

<style>
  .calculator-container {
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    padding: var(--spacing-lg);
    margin: var(--spacing-lg) 0;
  }
  
  .calculator-header {
    margin-bottom: var(--spacing-lg);
  }
  
  .calculator-header h2 {
    color: var(--league-blue);
    margin-bottom: var(--spacing-sm);
  }
  
  .calculator-description {
    color: var(--league-gray);
    font-size: 0.95em;
  }
  
  .calculator-inputs {
    display: grid;
    gap: var(--spacing-md);
    margin-bottom: var(--spacing-lg);
  }
  
  .input-group {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-xs);
  }
  
  .input-group label {
    font-weight: 500;
    color: var(--league-gray);
  }
  
  .input-help {
    display: block;
    font-size: 0.85em;
    color: #6b7280;
    font-weight: normal;
    margin-top: 2px;
  }
  
  .input-group input {
    padding: var(--spacing-sm) var(--spacing-md);
    border: 2px solid #e5e7eb;
    border-radius: 5px;
    font-size: 1em;
    transition: border-color 0.2s;
  }
  
  .input-group input:focus {
    outline: none;
    border-color: var(--league-blue);
  }
  
  .calculator-result {
    background: #f9fafb;
    border-left: 4px solid var(--league-blue);
    border-radius: 5px;
    padding: var(--spacing-md);
    margin-bottom: var(--spacing-lg);
  }
  
  .result-value {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--spacing-md);
  }
  
  .result-label {
    font-weight: 600;
    color: var(--league-gray);
  }
  
  .result-number {
    font-size: 1.5em;
    font-weight: 700;
    font-family: var(--font-mono);
  }
  
  .tier-badge {
    padding: var(--spacing-sm) var(--spacing-md);
    border-radius: 5px;
    margin-bottom: var(--spacing-md);
  }
  
  .result-breakdown {
    margin-top: var(--spacing-md);
    padding-top: var(--spacing-md);
    border-top: 1px solid #e5e7eb;
  }
  
  .result-breakdown ul {
    list-style: none;
    padding-left: 0;
    margin: var(--spacing-sm) 0 0 0;
  }
  
  .result-breakdown li {
    padding: var(--spacing-xs) 0;
    color: var(--league-gray);
  }
  
  .tier-scale {
    position: relative;
    height: 60px;
    background: linear-gradient(to right, 
      #10b981 0%, 
      #f59e0b 20%, 
      #ef4444 40%, 
      #dc2626 60%, 
      #991b1b 80%, 
      #991b1b 100%);
    border-radius: 5px;
    margin-bottom: var(--spacing-md);
  }
  
  .tier-marker {
    position: absolute;
    top: -10px;
    width: 20px;
    height: 80px;
    background: #000;
    border-radius: 10px;
    transform: translateX(-50%);
    box-shadow: 0 2px 8px rgba(0,0,0,0.3);
    display: none;
  }
  
  .tier-labels {
    display: flex;
    justify-content: space-between;
    font-size: 0.75em;
    color: white;
    padding: 5px;
    text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
  }
  
  @media (max-width: 768px) {
    .calculator-inputs {
      grid-template-columns: 1fr;
    }
    
    .result-value {
      flex-direction: column;
      align-items: flex-start;
      gap: var(--spacing-xs);
    }
  }
</style>

